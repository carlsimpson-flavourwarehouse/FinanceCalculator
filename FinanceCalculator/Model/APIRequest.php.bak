<?php
namespace CarlSimpson\FinanceCalculator\Model;

use Magento\Framework\App\Filesystem\DirectoryList;
use Magento\Framework\Filesystem;
use Magento\Framework\HTTP\Client\CurlFactory;
use Magento\Framework\Message\ManagerInterface;
use Magento\Framework\App\CacheInterface;
use Magento\Customer\Api\CustomerRepositoryInterface;
use Magento\Framework\Api\SearchCriteriaBuilder;
use Magento\Customer\Model\ResourceModel\GroupRepository;

class APIRequest
{
    /**
     * @var CurlFactory
     */
    private $curlFactory;

    /**
     * @var CacheInterface
     */
    private  $cache;

    /**
     * @var ManagerInterface
     */
    private $messageManager;

    /**
     * @var CustomerRepositoryInterface
     */
    protected $customerRepository;

    /**
     * @var SearchCriteriaBuilder
     */
    private $searchCriteriaBuilder;

    /**
     * @var GroupRepository
     */
    private $customerGroupRepository;

    /**
     * @var Filesystem
     */
    protected $fileSystem;


    /**
     * @param CurlFactory $curlFactory
     * @param ManagerInterface $messageManager
     * @param CacheInterface $cache
     * @param CustomerRepositoryInterface $customerRepository
     * @param SearchCriteriaBuilder $searchCriteriaBuilder
     * @param GroupRepository $customerGroupRepository
     * @param Filesystem $fileSystem
     */
    public function __construct(
        CurlFactory $curlFactory,
        ManagerInterface $messageManager,
        CacheInterface $cache,
        CustomerRepositoryInterface $customerRepository,
        SearchCriteriaBuilder $searchCriteriaBuilder,
        GroupRepository $customerGroupRepository,
        Filesystem $fileSystem
    ) {
        $this->curlFactory = $curlFactory;
        $this->messageManager = $messageManager;
        $this->cache = $cache;
        $this->customerRepository = $customerRepository;
        $this->searchCriteriaBuilder = $searchCriteriaBuilder;
        $this->customerGroupRepository = $customerGroupRepository;
        $this->fileSystem = $fileSystem;
    }

    /**
     * @param $clientId
     * @return bool|mixed|string
     */
    public function MakeRequest()
    {
        try{
            $url = "https://6159caa2601e6f0017e5a2f0.mockapi.io/api/v1/finance";
            
            $data = array(
              )
            );

            $json = json_encode($data);
    
            $ch = curl_init();
            curl_setopt($ch, CURLOPT_CUSTOMREQUEST, "POST");
            curl_setopt($ch, CURLOPT_POSTFIELDS, $json);
            curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);
            curl_setopt($ch, CURLOPT_URL, $url);
            curl_setopt($ch, CURLOPT_FAILONERROR, 0);
            curl_setopt($ch, CURLOPT_FOLLOWLOCATION, 1);
            curl_setopt($ch, CURLOPT_RETURNTRANSFER, 1);
            curl_setopt($ch, CURLOPT_CONNECTTIMEOUT, 30);
            curl_setopt($ch, CURLOPT_TIMEOUT, 200);
            curl_setopt($ch, CURLOPT_SSL_VERIFYPEER, 0);
    
            $result = curl_exec($ch);
            $result2 = json_decode($result);
            //log result 2 above
            $writer = new \Zend\Log\Writer\Stream(BP . '/var/log/logger.log');
            $logger = new \Zend\Log\Logger();
            $logger->addWriter($writer);
            $logger->info(print_r($result2,true));
            // $action = $result2->result->action;

            return $action;
        }
        catch (\Exception $e) {
            $writer = new \Zend\Log\Writer\Stream(BP . '/var/log/logger.log');
            $logger = new \Zend\Log\Logger();
            $logger->addWriter($writer);
            $logger->info($e);
            return "FAIL FROM ERROR";
        }
        
    }
}
